{"blockDat":{},"dynamicDat":{"dynamic_variables":[],"dynamic_myblocks":[]},"glsl":"precision highp float;\n\n//replacement shader\n//Base Variables\nattribute vec4 a_position;\nattribute vec4 a_color;\nattribute vec2 a_texCoord;\n \nvarying vec4 v_color;\nvarying vec2 v_texCoord;\n\nvarying float v_depth;\nuniform float u_timer;\nuniform mat4 u_transform;\n\nuniform sampler2D u_skin;\n\n//Pen+ Textures\nuniform mediump vec2 u_res;\n\nhighp vec4 rotation(highp vec4 invec4) {\n    return vec4(\n      (invec4.y) * u_transform[1][0] + (invec4.x) * u_transform[1][1],\n      (invec4.y) * u_transform[1][1] - (invec4.x) * u_transform[1][0],\n      invec4.zw\n    );\n}\n\n//Vertex Shader\nvoid vertex() {\ngl_Position = (rotation(a_position) + vec4(u_transform[0][2],u_transform[0][3],0,0)) * vec4(a_position.w * u_transform[0][0],a_position.w * -u_transform[0][1],1,1) - vec4(0,0,1,0);\nv_color = a_color;\nv_texCoord = a_texCoord;\n}\n\n// TODO: shouldn't this be isolated?\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20201014 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n\treturn x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n\treturn x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n\treturn mod289(((x*34.0)+10.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v) {\n\tconst vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n\tconst vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n\t// First corner\n\tvec3 i  = floor(v + dot(v, C.yyy) );\n\tvec3 x0 =   v - i + dot(i, C.xxx) ;\n\n\t// Other corners\n\tvec3 g = step(x0.yzx, x0.xyz);\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\t//   x0 = x0 - 0.0 + 0.0 * C.xxx;\n\t//   x1 = x0 - i1  + 1.0 * C.xxx;\n\t//   x2 = x0 - i2  + 2.0 * C.xxx;\n\t//   x3 = x0 - 1.0 + 3.0 * C.xxx;\n\tvec3 x1 = x0 - i1 + C.xxx;\n\tvec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n\tvec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n\t// Permutations\n\ti = mod289(i);\n\tvec4 p = permute( permute( permute(\n\t\t\t\ti.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n\t\t\t+ i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n\t\t\t+ i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n\t// Gradients: 7x7 points over a square, mapped onto an octahedron.\n\t// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n\tfloat n_ = 0.142857142857; // 1.0/7.0\n\tvec3  ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n\tvec4 x_ = floor(j * ns.z);\n\tvec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs(x) - abs(y);\n\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\t//vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n\t//vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n\tvec4 s0 = floor(b0)*2.0 + 1.0;\n\tvec4 s1 = floor(b1)*2.0 + 1.0;\n\tvec4 sh = -step(h, vec4(0.0));\n\n\tvec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n\tvec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n\tvec3 p0 = vec3(a0.xy,h.x);\n\tvec3 p1 = vec3(a0.zw,h.y);\n\tvec3 p2 = vec3(a1.xy,h.z);\n\tvec3 p3 = vec3(a1.zw,h.w);\n\n\t//Normalise gradients\n\tvec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\tvec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n\tm = m * m;\n\treturn 105.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n\t\t\t\t\t\t\t\t\tdot(p2,x2), dot(p3,x3) ) );\n}\n\nuniform float u_Scale;\nuniform float u_Intensity;\n\nfloat rand(vec2 a) {\n\treturn fract(sin(dot(mod(a, vec2(1000.0)).xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat ease(float t) {\n\treturn t * t * (3.0 - 2.0 * t);\n}\n\nfloat rainDist(vec2 p, float scale, float intensity) {\n\t// scale everything\n\tp *= 0.1;\n\t// sheer\n\tp.x += p.y * 0.1;\n\t// scroll\n\tp.y -= u_timer * 500.0 / scale;\n\t// expand Y\n\tp.y *= 0.03;\n\tfloat ix = floor(p.x);\n\t// shift Y\n\tp.y += mod(ix, 2.0) * 0.5 + (rand(vec2(ix)) - 0.5) * 0.3;\n\tfloat iy = floor(p.y);\n\tvec2 index = vec2(ix, iy);\n\t// mod\n\tp -= index;\n\t// shift X\n\tp.x += (rand(index.yx) * 2.0 - 1.0) * 0.35;\n\t// distance\n\tvec2 a = abs(p - 0.5);\n\tfloat res = max(a.x * 0.8, a.y * 0.5) - 0.1;\n\t// decimate\n\tbool empty = rand(index) < mix(1.0, 0.1, intensity);\n\treturn empty ? 1.0 : res;\n}\n\nfloat rippleHeight(vec2 p, vec2 pos, float age, float size, float modSize, float thickness) {\n\tfloat strength = 1.0 - exp(-(1.0 - age) * 1.0);\n\tfloat h = max(0.0, 1.0 - abs(length(mod(p - pos + modSize * 0.5, vec2(modSize)) - modSize * 0.5) - size * age) / thickness);\n\th = h * h * (3.0 - 2.0 * h); // smoothstep\n\treturn h * strength;\n}\n\nvoid fragment() {\n\tvec2 wpos = v_texCoord;\n\tvec2 origWpos = wpos;\n\tfloat intensity = u_Intensity;\n\n\tvec3 add = vec3(0);\n\tfloat rainSum = 0.0;\n\n\tconst int numLayers = 4;\n\tfloat scales[4];\n\tscales[0] = 1.0;\n\tscales[1] = 1.8;\n\tscales[2] = 2.6;\n\tscales[3] = 4.8;\n\n\tfor (int i = 0; i < numLayers; i++) {\n\t\tfloat scale = scales[i];\n\t\tfloat r = rainDist(vec2(1,-1) * v_texCoord * scale / u_Scale + 500.0 * float(i), scale, intensity);\n\t\tif (r < 0.0) {\n\t\t\tfloat v = (1.0 - exp(r * 5.0)) / scale * 2.0;\n\t\t\twpos.x += v * 4.0 * u_Scale;\n\t\t\twpos.y -= v * 0.8 * u_Scale;\n\t\t\tadd += vec3(0.1, 0.15, 0.2) * v;\n\t\t\trainSum += (1.0 - rainSum) * 0.75;\n\t\t}\n\t}\n\n\tvec3 color = texture2D(u_skin,wpos).xyz;\n\n\tvec3 rainColor = vec3(0.4, 0.5, 0.8);\n\tcolor += add;\n\tcolor = mix(color, rainColor, 0.1 * rainSum);\n\n\t// vec3 fog = light * (0.5 + rainSum * 0.5);\n\t// color = color / (1.0 + fog) + fog;\n\n\tgl_FragColor = vec4(color, 1);\n}","isText":true,"savedVarState":{"u_cameraPosition":["-0.0125","-0.0125","0.0125","0.0125"],"u_skin":"CS:S","uIntensity":"0.5","uScale":"0.1","u_Scale":"0.005","u_Intensity":"0.5"}}